{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","sortFunction","a","b","month","state","items","isLoaded","fetch","response","json","data","console","log","sort","this","setState","align","style","position","left","top","transform","width","height","dataKey","stroke","strokeDasharray","type","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRA4EeA,E,kDAtEf,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,aAAe,SAACC,EAAGC,GAEjB,OAAID,EAAEE,QAAUD,EAAEC,MACP,EAGCF,EAAEE,MAAQD,EAAEC,OAAU,EAAI,GAZtC,EAAKC,MAAQ,CACXC,MAAO,KACPC,UAAS,GAJM,E,kMAoBMC,MAAM,kF,cAAvBC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,QAAQC,IAAIF,GACZA,EAAKG,KAAKC,KAAKd,cACfc,KAAKC,SAAS,CAACV,MAAMK,EAAKJ,UAAS,I,qIAInC,OAAIQ,KAAKV,MAAME,SAKb,sBAAKU,MAAM,SAAX,UAAoB,uDACrB,qBAAOC,MAAO,CACbC,SAAU,WAAYC,KAAM,MAAOC,IAAK,MACxCC,UAAW,yBAFZ,SAKE,eAAC,IAAD,CAAWC,MAAO,IAAMC,OAAQ,IAAKb,KAAMI,KAAKV,MAAMC,MAAtD,UACD,cAAC,IAAD,CAAOmB,QAAQ,UACf,cAAC,IAAD,CAAOA,QAAU,UACjB,cAAC,IAAD,CAAeC,OAAO,OAAOC,gBAAgB,QAC7C,cAAC,IAAD,CAAMC,KAAK,WAAWH,QAAQ,QAAQC,OAAO,YAC7C,cAAC,IAAD,YAfK,kD,GA/BSG,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b327e8c.chunk.js","sourcesContent":["import './App.css';\nimport { LineChart, XAxis, YAxis, CartesianGrid, Line, Tooltip} from \"recharts\";\nimport { Component } from 'react';\n\nclass App extends Component{\n\nconstructor(props) {\n  super(props);\n  this.state = {\n    items: null,\n    isLoaded:false,\n  }\n}\n\nsortFunction = (a, b) => {\n\n  if (a.month === b.month) {\n      return 0;\n  }\n  else {\n      return (a.month < b.month) ? -1 : 1;\n  }\n}\n\n\nasync componentDidMount(){\n  const response = await fetch('https://h0elp4un0m.execute-api.ap-south-1.amazonaws.com/dev1/lambdahttphandler')\n  const data = await response.json();\n  console.log(data)\n  data.sort(this.sortFunction)\n  this.setState({items:data,isLoaded:true})\n}\nrender(){\n\n  if(!this.state.isLoaded) {\n  return <div> Loading.. </div> \n  }\n\n   return(\n    <div align=\"center\"><h1> Interest over time. </h1> \n   <div   style={{\n    position: 'absolute', left: '50%', top: '50%',\n    transform: 'translate(-50%, -50%)'\n}}>\n \n    {<LineChart width={1000} height={300} data={this.state.items} >\n    <XAxis dataKey=\"month\"/>\n    <YAxis dataKey = \"value\" />\n    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\n    <Line type=\"monotone\" dataKey=\"value\" stroke=\"#0500d4\" />\n    <Tooltip />\n\n  </LineChart>\n      }  \n      </div>\n      </div>\n   );\n}\n}\n\n\n// convertData(data) {\n//   let arr = [];\n//   for (let i = 0; i < data.length; i++) {\n//     let obj = { month: data[i].month };\n//     // loop throgh comodities\n//     for (let j = 0; j < data[i].commodities.length; j++) {\n//       let commodity = data[i].commodities[j];\n//       obj[commodity.name] = commodity.moves;\n//     }\n//     arr.push(obj);\n//   }\n//   return arr;\n// }\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}